#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <sys/uio.h>
#include <netinet/in.h>
#include <string.h>
#include <netdb.h>
#include <time.h>
#include <jni.h>
#include <arpa/inet.h>

#include "util.h"
#include "../config.h"
#include "../report_data/report.h"


//typedef struct report_info {
//    int fd;
//    int type;
//    double startTime;
//    int timeElapsed;
//    int returnValue;
//    int errorNum;
//    char host[50];
//    char address[400];
//    char desc[200];
//    int port;
//} REPORT_INFO;
REPORT_INFO report_info = {-1, DNS_EVENT, 0.0, 0, -1, 0, "", "", "", 0};
pthread_t tidp;

/**
 * getaddrinfo
 * getnameinfo
 * gethostbyname
 */

/**
 * android 4.0.3: getaddrinfo=>android_getaddrinfo_proxy
 * android 4.1.1: getaddrinfo=>android_getaddrinfo_proxy
 * android 4.2  : getaddrinfo=>android_getaddrinfo_proxy
 * android 4.3  : getaddrinfo=>android_getaddrinfoforiface(5)
 * android 4.4  : getaddrinfo=>android_getaddrinfoforiface(6)
 * android 5.0  : getaddrinfo=>android_getaddrinfofornet
 * android 6.0  : getaddrinfo=>android_getaddrinfofornet
 * android 7.0  : getaddrinfo=>android_getaddrinfofornet
 */

// TODO: android 4.3
int xhook_android_getaddrinfoforiface(const char *hostname,
                                      const char *servname,
                                      const struct addrinfo *hints,
                                      const char *iface,
                                      struct addrinfo **res);
HOOK_INFO hook_info_android_getaddrinfoforiface = {{},
                                                   "libc.",
                                                   "android_getaddrinfoforiface",
                                                   xhook_android_getaddrinfoforiface,
                                                   xhook_android_getaddrinfoforiface};
int xhook_android_getaddrinfoforiface(const char *hostname,
                                      const char *servname,
                                      const struct addrinfo *hints,
                                      const char *iface,
                                      struct addrinfo **res) {
    int (*orig_android_getaddrinfoforiface)(const char *hostname,
                                            const char *servname,
                                            const struct addrinfo *hints,
                                            const char *iface,
                                            struct addrinfo **res);
    struct timeval t1;
    gettimeofday(&t1,NULL);
    struct hook_t eph = hook_info_android_getaddrinfoforiface.eph;
    orig_android_getaddrinfoforiface = (void*)eph.orig;
    hook_precall(&eph);
    int status = orig_android_getaddrinfoforiface(hostname, servname, hints, iface, res);
    hook_postcall(&eph);
    struct timeval t2;
    gettimeofday(&t2,NULL);

    // InetAddress.java#getAllByNameImpl
    // (1)parseNumericAddressNoThrow
    // (2)lookupHostByName
    // TODO:
    if ((hints != NULL) && (hints->ai_socktype == SOCK_STREAM)
        && (hints->ai_flags == AI_ADDRCONFIG)) {
        LOGD("<<<<<<<<<<<<<<<<<<DNS START<<<<<<<<<<<<<<<<<<<<<<<<<");
        LOGD("hostname=%s, servname=%s, ai_family=%d, ai_socktype=%d, ai_flags=0x%X, ai_protocol=%d",
             hostname, servname, hints->ai_family, hints->ai_socktype, hints->ai_flags, hints->ai_protocol);

        struct addrinfo *cur;
        struct sockaddr_in *addr;
        char ipbuf[16];
        for (cur = *res; cur != NULL; cur = cur->ai_next) {
            addr = (struct sockaddr_in *) cur->ai_addr;
            inet_ntop(AF_INET, &addr->sin_addr, ipbuf, 16);
            LOGD("ip=%s, port=%d, ai_canonname=%s\n", ipbuf, addr->sin_port, cur->ai_canonname);
            if (strlen(report_info.address) == 0) {
                LOGD("strcpy");
                strcpy(report_info.address, ipbuf);
            } else {
                LOGD("strcat");
                strcat(report_info.address, ipbuf);
            }
            strcat(report_info.address, ";");
            LOGD("current address = %s\n", report_info.address);
        }
        report_info.startTime = (t1.tv_sec + t1.tv_usec / 1000000);
        report_info.timeElapsed = (t2.tv_sec - t1.tv_sec) * 1000 + (t2.tv_usec - t1.tv_usec) / 1000;
        report_info.returnValue = status;
        strcpy(report_info.host, hostname);
        if (status != 0) {
            strcpy(report_info.desc, gai_strerror(status));
        }
        int err = pthread_create(&tidp, NULL, thread_run, &report_info);
        if (err != 0) {
            LOGE("can not create report thread");
        }
        LOGD(">>>>>>>>>>>>>>>>>>DNS END>>>>>>>>>>>>>>>>>>>>>>>>");
    }

    return status;
}

void reset_report_info() {

}



